#!/usr/bin/env node

// –°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è 10 —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
import axios from 'axios'

const API_BASE_URL = 'http://127.0.0.1:8000/api/v1'

const testUsers = [
    { nickname: '–ò–≥—Ä–æ–∫1' },
    { nickname: '–ò–≥—Ä–æ–∫2' },
    { nickname: '–ò–≥—Ä–æ–∫3' },
    { nickname: '–ò–≥—Ä–æ–∫4' },
    { nickname: '–ò–≥—Ä–æ–∫5' },
    { nickname: '–ò–≥—Ä–æ–∫6' },
    { nickname: '–ò–≥—Ä–æ–∫7' },
    { nickname: '–ò–≥—Ä–æ–∫8' },
    { nickname: '–ò–≥—Ä–æ–∫9' },
    { nickname: '–ò–≥—Ä–æ–∫10' }
]

async function createTestUsers() {
    console.log('–°–æ–∑–¥–∞–Ω–∏–µ 10 —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...')
    
    const api = axios.create({
        baseURL: API_BASE_URL,
        withCredentials: true,
        headers: {
            'Content-Type': 'application/json'
        }
    })

    // –°–æ–∑–¥–∞–µ–º interceptor –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è cookies
    let sessionCookie = null
    api.interceptors.response.use((response) => {
        const cookies = response.headers['set-cookie']
        if (cookies) {
            sessionCookie = cookies.find(cookie => cookie.startsWith('session='))
        }
        return response
    })

    api.interceptors.request.use((config) => {
        if (sessionCookie) {
            config.headers.Cookie = sessionCookie
        }
        return config
    })

    // –°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è
    try {
        console.log('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...')
        await api.put('/auth/token', 
            {"id": "e6ad1ca2-4a84-4845-ad8d-7f5617d0af5a", "role": "cashier"},
            {headers: {'Authorization': 'Basic e37bd08d'}}
        )
        console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞')
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error.response?.data || error.message)
        return
    }

    const createdUsers = []

    for (let i = 0; i < testUsers.length; i++) {
        try {
            console.log(`–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${testUsers[i].nickname}`)
            const response = await api.post('/users', testUsers[i])
            console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${testUsers[i].nickname}, ID: ${response.data.id}`)
            createdUsers.push({
                nickname: testUsers[i].nickname,
                id: response.data.id
            })
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${testUsers[i].nickname}:`, error.response?.data || error.message)
        }
    }

    console.log('\nüìã –°–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:')
    createdUsers.forEach((user, index) => {
        console.log(`${index + 1}. ${user.nickname} - ${user.id}`)
    })

    console.log(`\n‚ú® –°–æ–∑–¥–∞–Ω–æ ${createdUsers.length} –∏–∑ ${testUsers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`)
}

createTestUsers().catch(console.error)