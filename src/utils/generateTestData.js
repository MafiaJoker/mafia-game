import { apiService } from '@/services/api'

// –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ª—É—á–∞–π–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
const random = {
    // –°–ª—É—á–∞–π–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –º–∞—Å—Å–∏–≤–∞
    choice: (array) => array[Math.floor(Math.random() * array.length)],
    
    // –°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ
    int: (min, max) => Math.floor(Math.random() * (max - min + 1)) + min,
    
    // –°–ª—É—á–∞–π–Ω–∞—è –¥–∞—Ç–∞ –≤ –ø—Ä–æ—à–ª–æ–º
    pastDate: (daysAgo = 30) => {
        const date = new Date()
        date.setDate(date.getDate() - random.int(1, daysAgo))
        date.setHours(random.int(18, 23), random.int(0, 59), 0, 0)
        return date.toISOString()
    },

    // –°–ª—É—á–∞–π–Ω–∞—è –¥–∞—Ç–∞ –≤ –±—É–¥—É—â–µ–º
    futureDate: (daysFromNow = 30) => {
        const date = new Date()
        date.setDate(date.getDate() + random.int(1, daysFromNow))
        date.setHours(random.int(18, 23), random.int(0, 59), 0, 0)
        return date.toISOString()
    }
}

// –®–∞–±–ª–æ–Ω—ã –¥–∞–Ω–Ω—ã—Ö
const eventTemplates = [
    {
        label: '–í–µ—Å–µ–Ω–Ω–∏–π —Ç—É—Ä–Ω–∏—Ä',
        description: '–¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–π –≤–µ—Å–µ–Ω–Ω–∏–π —Ç—É—Ä–Ω–∏—Ä –ø–æ –º–∞—Ñ–∏–∏',
        language: 'ru'
    },
    {
        label: '–õ–µ—Ç–Ω–∏–π –∫—É–±–æ–∫',
        description: '–û—Ç–∫—Ä—ã—Ç—ã–π –ª–µ—Ç–Ω–∏–π –∫—É–±–æ–∫ –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤',
        language: 'ru'
    },
    {
        label: '–û—Å–µ–Ω–Ω–∏–π —á–µ–º–ø–∏–æ–Ω–∞—Ç',
        description: '–ß–µ–º–ø–∏–æ–Ω–∞—Ç –≥–æ—Ä–æ–¥–∞ –ø–æ –º–∞—Ñ–∏–∏',
        language: 'ru'
    },
    {
        label: '–ó–∏–º–Ω—è—è –ª–∏–≥–∞',
        description: '–ó–∏–º–Ω—è—è –ª–∏–≥–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤',
        language: 'ru'
    },
    {
        label: '–ù–æ–≤–æ–≥–æ–¥–Ω–∏–π —Ç—É—Ä–Ω–∏—Ä',
        description: '–ü—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–π –Ω–æ–≤–æ–≥–æ–¥–Ω–∏–π —Ç—É—Ä–Ω–∏—Ä',
        language: 'ru'
    }
]

const playerNames = [
    '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä', '–ú–∞—Ä–∏—è', '–î–º–∏—Ç—Ä–∏–π', '–ê–Ω–Ω–∞', '–°–µ—Ä–≥–µ–π',
    '–ï–ª–µ–Ω–∞', '–ê–Ω–¥—Ä–µ–π', '–û–ª—å–≥–∞', '–ù–∏–∫–æ–ª–∞–π', '–¢–∞—Ç—å—è–Ω–∞',
    '–í–ª–∞–¥–∏–º–∏—Ä', '–ò—Ä–∏–Ω–∞', '–ê–ª–µ–∫—Å–µ–π', '–°–≤–µ—Ç–ª–∞–Ω–∞', '–ú–∏—Ö–∞–∏–ª',
    '–ù–∞—Ç–∞–ª—å—è', '–ü–∞–≤–µ–ª', '–Æ–ª–∏—è', '–ò–≥–æ—Ä—å', '–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞',
    '–†–æ–º–∞–Ω', '–ú–∞—Ä–∏–Ω–∞', '–í–∞–ª–µ–Ω—Ç–∏–Ω', '–õ—é–¥–º–∏–ª–∞', '–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω'
]

const roles = ['–ú–∏—Ä–Ω—ã–π', '–ú–∏—Ä–Ω—ã–π', '–ú–∏—Ä–Ω—ã–π', '–ú–∏—Ä–Ω—ã–π', '–ú–∏—Ä–Ω—ã–π', '–ú–∏—Ä–Ω—ã–π', '–®–µ—Ä–∏—Ñ', '–ú–∞—Ñ–∏—è', '–ú–∞—Ñ–∏—è', '–î–æ–Ω']
const gameResults = ['city_win', 'mafia_win', 'draw']

// –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
export async function generateTestData(options = {}) {
    const {
        eventsCount = 3,
        tablesPerEvent = random.int(2, 4),
        gamesPerTable = random.int(3, 8),
        createUsers = true
    } = options

    try {
        console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...')
        
        // 1. –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if (createUsers) {
            console.log('üë• –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...')
            await generateUsers()
        }

        // 2. –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        const usersResponse = await apiService.getUsers()
        const users = usersResponse.items || usersResponse || []
        
        if (users.length < 10) {
            throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–≥—Ä (–Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 10)')
        }

        // 3. –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø—ã –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
        const eventTypes = await apiService.getEventTypes()
        if (!eventTypes || eventTypes.length === 0) {
            throw new Error('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∏–ø–æ–≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π')
        }

        // 4. –°–æ–∑–¥–∞–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
        console.log(`üèÜ –°–æ–∑–¥–∞–µ–º ${eventsCount} –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π...`)
        const events = []
        
        for (let i = 0; i < eventsCount; i++) {
            const template = random.choice(eventTemplates)
            const eventType = random.choice(eventTypes)
            
            const eventData = {
                label: `${template.label} ${new Date().getFullYear()}`,
                description: template.description,
                start_date: i < 2 ? random.pastDate(60) : random.futureDate(30), // 2 –ø—Ä–æ—à–µ–¥—à–∏—Ö, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –±—É–¥—É—â–∏–µ
                event_type_id: eventType.id,
                language: template.language,
                table_name_template: '–°—Ç–æ–ª {}'
            }

            const event = await apiService.createEvent(eventData)
            events.push(event)
            console.log(`  ‚úÖ –°–æ–∑–¥–∞–Ω–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: ${event.label}`)

            // 5. –°–æ–∑–¥–∞–µ–º –∏–≥—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
            await generateGamesForEvent(event, users, tablesPerEvent, gamesPerTable)
        }

        console.log('üéâ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')
        return {
            success: true,
            eventsCreated: events.length,
            message: `–°–æ–∑–¥–∞–Ω–æ ${events.length} –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π —Å –∏–≥—Ä–∞–º–∏`
        }

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error)
        return {
            success: false,
            error: error.message
        }
    }
}

async function generateUsers() {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        const existingUsers = await apiService.getUsers()
        const existing = existingUsers.items || existingUsers || []
        
        const usersToCreate = Math.max(0, 25 - existing.length) // –°–æ–∑–¥–∞–µ–º –¥–æ 25 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        
        if (usersToCreate === 0) {
            console.log('  ‚ÑπÔ∏è –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
            return
        }

        for (let i = 0; i < usersToCreate; i++) {
            const name = random.choice(playerNames)
            const userData = {
                name: `${name} ${i + 1}`,
                nickname: `${name.toLowerCase()}${i + 1}`,
                telegram_id: 1000000 + i,
                telegram_username: `${name.toLowerCase()}${i + 1}`
            }

            try {
                await apiService.createUser(userData)
                console.log(`  ‚úÖ –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userData.nickname}`)
            } catch (error) {
                console.log(`  ‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userData.nickname} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`)
            }
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error)
    }
}

async function generateGamesForEvent(event, users, tablesCount, gamesPerTable) {
    console.log(`  üéÆ –°–æ–∑–¥–∞–µ–º –∏–≥—Ä—ã –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è "${event.label}"...`)
    
    for (let tableNum = 1; tableNum <= tablesCount; tableNum++) {
        console.log(`    üìã –°—Ç–æ–ª ${tableNum}...`)
        
        for (let gameNum = 1; gameNum <= gamesPerTable; gameNum++) {
            try {
                // –°–æ–∑–¥–∞–µ–º –∏–≥—Ä—É
                const gameData = {
                    label: `–ò–≥—Ä–∞ #${gameNum}`,
                    event_id: event.id,
                    table_id: tableNum
                }

                const game = await apiService.createGame(gameData)
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–æ–≤
                await addPlayersToGame(game, users)
                
                // –ó–∞–≤–µ—Ä—à–∞–µ–º –∏–≥—Ä—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
                await finishGame(game)
                
                console.log(`      ‚úÖ –ò–≥—Ä–∞ #${gameNum} —Å–æ–∑–¥–∞–Ω–∞ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞`)
                
            } catch (error) {
                console.error(`      ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä—ã #${gameNum}:`, error)
            }
        }
    }
}

async function addPlayersToGame(game, users) {
    // –í—ã–±–∏—Ä–∞–µ–º 10 —Å–ª—É—á–∞–π–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
    const selectedUsers = []
    const usersPool = [...users]
    
    for (let i = 0; i < 10 && usersPool.length > 0; i++) {
        const randomIndex = random.int(0, usersPool.length - 1)
        selectedUsers.push(usersPool.splice(randomIndex, 1)[0])
    }

    // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —Ä–æ–ª–∏
    const shuffledRoles = [...roles].sort(() => Math.random() - 0.5)
    
    // –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–æ–≤
    const playersData = selectedUsers.map((user, index) => ({
        user_id: user.id,
        name: user.nickname,
        role: shuffledRoles[index],
        position: index + 1,
        fouls: 0,
        points: random.int(0, 3) // –°–ª—É—á–∞–π–Ω—ã–µ –æ—á–∫–∏
    }))

    await apiService.addPlayersToGame(game.id, playersData)
}

async function finishGame(game) {
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä—É —Å–æ —Å–ª—É—á–∞–π–Ω—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
    const result = random.choice(gameResults)
    const startedAt = random.pastDate(30)
    const finishedAt = new Date(startedAt)
    finishedAt.setMinutes(finishedAt.getMinutes() + random.int(60, 120)) // –ò–≥—Ä–∞ –¥–ª–∏—Ç—Å—è 1-2 —á–∞—Å–∞

    const updateData = {
        result: result,
        started_at: startedAt,
        finished_at: finishedAt.toISOString(),
        is_finished: true
    }

    await apiService.updateGame(game.id, updateData)
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
export default {
    generateTestData,
    generateUsers
}