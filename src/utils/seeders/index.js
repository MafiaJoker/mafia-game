// –ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –≤—Å–µ—Ö seeders
import { EventSeeder } from './EventSeeder.js'
import { GameSeeder } from './GameSeeder.js'
import { UserSeeder } from './UserSeeder.js'

export { EventSeeder, GameSeeder, UserSeeder }

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö seeders
export async function seedAll(profile = 'minimal') {
    console.log(`üå± –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ seeding —Å –ø—Ä–æ—Ñ–∏–ª–µ–º: ${profile}`)
    
    const startTime = Date.now()
    let totalSuccess = 0
    let totalErrors = 0
    
    try {
        // 1. –°–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤–∫–ª—é—á–∞—è —Å—É–¥–µ–π –∏ –∞–¥–º–∏–Ω–æ–≤)
        const userSeeder = new UserSeeder(profile)
        const userResult = await userSeeder.safeRun('seed')
        totalSuccess += userSeeder.success.length
        totalErrors += userSeeder.errors.length
        
        // 2. –°–æ–∑–¥–∞—ë–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
        const eventSeeder = new EventSeeder(profile)
        const eventResult = await eventSeeder.safeRun('seed')
        totalSuccess += eventSeeder.success.length
        totalErrors += eventSeeder.errors.length
        
        // 3. –°–æ–∑–¥–∞—ë–º –∏–≥—Ä—ã
        const gameSeeder = new GameSeeder(profile)
        const gameResult = await gameSeeder.safeRun('seed')
        totalSuccess += gameSeeder.success.length
        totalErrors += gameSeeder.errors.length
        
        const duration = Date.now() - startTime
        
        console.log(`\\nüéâ Seeding –∑–∞–≤–µ—Ä—à—ë–Ω!`)
        console.log(`‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${duration}ms`)
        console.log(`‚úÖ –í—Å–µ–≥–æ —É—Å–ø–µ—à–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π: ${totalSuccess}`)
        console.log(`‚ùå –í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: ${totalErrors}`)
        
        return {
            success: totalErrors === 0,
            duration,
            totalSuccess,
            totalErrors,
            results: {
                users: userResult,
                events: eventResult,
                games: gameResult
            }
        }
        
    } catch (error) {
        console.error(`üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ seeding: ${error.message}`)
        return {
            success: false,
            error: error.message,
            duration: Date.now() - startTime,
            totalSuccess,
            totalErrors: totalErrors + 1
        }
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
export async function cleanAll() {
    console.log('üßπ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö...')
    
    const startTime = Date.now()
    let totalSuccess = 0
    let totalErrors = 0
    
    try {
        // –û—á–∏—â–∞–µ–º –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ —Å–æ–∑–¥–∞–Ω–∏—è
        
        // 1. –û—á–∏—â–∞–µ–º –∏–≥—Ä—ã
        const gameSeeder = new GameSeeder()
        const gameResult = await gameSeeder.safeRun('clean')
        totalSuccess += gameSeeder.success.length
        totalErrors += gameSeeder.errors.length
        
        // 2. –û—á–∏—â–∞–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
        const eventSeeder = new EventSeeder()
        const eventResult = await eventSeeder.safeRun('clean')
        totalSuccess += eventSeeder.success.length
        totalErrors += eventSeeder.errors.length
        
        // 3. –û—á–∏—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º–∏)
        const userSeeder = new UserSeeder()
        const userResult = await userSeeder.safeRun('clean')
        totalSuccess += userSeeder.success.length
        totalErrors += userSeeder.errors.length
        
        const duration = Date.now() - startTime
        
        console.log(`\nüßΩ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!`)
        console.log(`‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${duration}ms`)
        console.log(`‚úÖ –í—Å–µ–≥–æ —É—Å–ø–µ—à–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π: ${totalSuccess}`)
        console.log(`‚ùå –í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: ${totalErrors}`)
        
        return {
            success: totalErrors === 0,
            duration,
            totalSuccess,
            totalErrors,
            results: {
                games: gameResult,
                events: eventResult,
                users: userResult
            }
        }
        
    } catch (error) {
        console.error(`üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: ${error.message}`)
        return {
            success: false,
            error: error.message,
            duration: Date.now() - startTime,
            totalSuccess,
            totalErrors: totalErrors + 1
        }
    }
}

// –ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
export async function quickSeed() {
    console.log('‚ö° –ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...')
    
    try {
        // –°–æ–∑–¥–∞—ë–º –æ–¥–Ω–æ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∏ –∏–≥—Ä—É
        const userSeeder = new UserSeeder()
        const testUser = await userSeeder.createTestUser('judge')
        
        const eventSeeder = new EventSeeder()
        const testEvent = await eventSeeder.createTestEvent()
        
        const gameSeeder = new GameSeeder()
        const testGame = await gameSeeder.createTestGame(testEvent.id)
        
        console.log('‚ö° –ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!')
        console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${testUser.nickname}`)
        console.log(`üìÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: ${testEvent.name}`)
        console.log(`üéÆ –ò–≥—Ä–∞: ${testGame.name}`)
        
        return {
            success: true,
            user: testUser,
            event: testEvent,
            game: testGame
        }
        
    } catch (error) {
        console.error(`üí• –û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è: ${error.message}`)
        return {
            success: false,
            error: error.message
        }
    }
}