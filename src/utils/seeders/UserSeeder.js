import { faker } from '@faker-js/faker'
import { BaseSeeder } from './BaseSeeder.js'
import { SEED_CONFIG, getProfileConfig } from '@/config/seedConfig.js'

export class UserSeeder extends BaseSeeder {
    constructor(profile = 'minimal') {
        super()
        this.profile = getProfileConfig(profile)
    }
    
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    generateUser() {
        const firstNames = SEED_CONFIG.users.firstNames
        const lastNames = SEED_CONFIG.users.lastNames
        const roles = SEED_CONFIG.users.roles
        
        const firstName = this.randomFromArray(firstNames)
        const lastName = this.randomFromArray(lastNames)
        const role = this.randomFromArray(roles)
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–∏–∫–Ω–µ–π–º
        const nicknameVariants = [
            `${firstName}_${lastName}`,
            `${firstName}${this.randomInt(10, 99)}`,
            `${lastName}_${firstName}`,
            `${firstName.toLowerCase()}${lastName.toLowerCase()}`,
            `${firstName}_${this.randomInt(1980, 2005)}`
        ]
        
        const nickname = this.randomFromArray(nicknameVariants)
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–ª–µ–≥—Ä–∞–º username
        const telegramUsername = '@' + nickname.toLowerCase().replace(/[^a-z0-9_]/g, '_')
        
        return {
            firstName: firstName,
            lastName: lastName,
            nickname: nickname,
            email: faker.internet.email(firstName, lastName, 'example.com').toLowerCase(),
            telegramId: this.randomInt(100000000, 999999999).toString(),
            telegramUsername: telegramUsername,
            phone: faker.phone.number('+7 (9##) ###-##-##'),
            role: role,
            isActive: this.randomBoolean() ? true : this.randomInt(1, 10) > 2, // 80% –∞–∫—Ç–∏–≤–Ω—ã—Ö
            rating: this.randomInt(800, 2400), // ELO —Ä–µ–π—Ç–∏–Ω–≥ –¥–ª—è –º–∞—Ñ–∏–∏
            gamesPlayed: this.randomInt(0, 500),
            gamesWon: this.randomInt(0, 250),
            winRate: null, // –ë—É–¥–µ—Ç –≤—ã—á–∏—Å–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            preferredLanguage: this.randomFromArray(SEED_CONFIG.events.languages),
            location: faker.address.city(),
            birthDate: faker.date.between('1980-01-01', '2005-12-31').toISOString().split('T')[0],
            registrationDate: faker.date.between('2020-01-01', new Date()).toISOString(),
            lastLoginDate: faker.date.recent(30).toISOString(),
            bio: faker.lorem.sentence(),
            achievements: this.generateAchievements(),\n            preferences: {\n                notifications: {\n                    email: this.randomBoolean(),\n                    telegram: this.randomBoolean(),\n                    push: this.randomBoolean()\n                },\n                privacy: {\n                    showRealName: this.randomBoolean(),\n                    showStats: this.randomBoolean(),\n                    showLocation: this.randomBoolean()\n                },\n                gameSettings: {\n                    autoReady: this.randomBoolean(),\n                    soundEffects: this.randomBoolean(),\n                    darkTheme: this.randomBoolean()\n                }\n            }\n        }\n    }\n    \n    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n    generateAchievements() {\n        const possibleAchievements = [\n            'first_game', 'first_win', 'veteran', 'lucky', 'strategist',\n            'survivor', 'detective', 'don_master', 'sheriff_ace', 'peaceful_winner',\n            'tournament_winner', 'judge_novice', 'judge_expert', 'social_player'\n        ]\n        \n        const achievementCount = this.randomInt(0, 5)\n        const userAchievements = []\n        \n        for (let i = 0; i < achievementCount; i++) {\n            const achievement = this.randomFromArray(possibleAchievements)\n            if (!userAchievements.includes(achievement)) {\n                userAchievements.push(achievement)\n            }\n        }\n        \n        return userAchievements\n    }\n    \n    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª—è —Å—É–¥—å–∏\n    generateJudgeProfile() {\n        const judgeData = this.generateUser()\n        \n        // –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—É–¥—å–∏\n        judgeData.role = 'judge'\n        judgeData.rating = this.randomInt(1200, 2800) // –°—É–¥—å–∏ –æ–±—ã—á–Ω–æ –±–æ–ª–µ–µ –æ–ø—ã—Ç–Ω—ã–µ\n        judgeData.gamesPlayed = this.randomInt(100, 1000)\n        judgeData.isActive = true // –í—Å–µ —Å—É–¥—å–∏ –∞–∫—Ç–∏–≤–Ω—ã\n        \n        // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è —Å—É–¥—å–∏ –ø–æ–ª—è\n        judgeData.judgeInfo = {\n            experience: this.randomInt(1, 15), // –õ–µ—Ç –æ–ø—ã—Ç–∞\n            gamesJudged: this.randomInt(50, 800),\n            certification: this.randomFromArray(['novice', 'intermediate', 'expert', 'master']),\n            specializations: this.randomFromArray([\n                ['–∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –º–∞—Ñ–∏—è'],\n                ['—Å–ø–æ—Ä—Ç–∏–≤–Ω–∞—è –º–∞—Ñ–∏—è'],\n                ['—Ç—É—Ä–Ω–∏—Ä–Ω–∞—è –º–∞—Ñ–∏—è'],\n                ['–∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –º–∞—Ñ–∏—è', '—Å–ø–æ—Ä—Ç–∏–≤–Ω–∞—è –º–∞—Ñ–∏—è'],\n                ['–≤—Å–µ –≤–∏–¥—ã']\n            ]),\n            languages: this.randomFromArray([\n                ['ru'],\n                ['en'],\n                ['am'],\n                ['ru', 'en'],\n                ['ru', 'am'],\n                ['ru', 'en', 'am']\n            ]),\n            availability: {\n                weekdays: this.randomBoolean(),\n                weekends: true,\n                evenings: this.randomBoolean(),\n                tournaments: this.randomBoolean()\n            },\n            contactPreference: this.randomFromArray(['telegram', 'email', 'phone'])\n        }\n        \n        return judgeData\n    }\n    \n    // –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n    async seedUsers() {\n        this.log(`üë• –°–æ–∑–¥–∞–Ω–∏–µ ${this.profile.users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...`)\n        \n        for (let i = 0; i < this.profile.users; i++) {\n            try {\n                const userData = this.generateUser()\n                \n                // –í—ã—á–∏—Å–ª—è–µ–º winRate\n                if (userData.gamesPlayed > 0) {\n                    userData.winRate = Math.round((userData.gamesWon / userData.gamesPlayed) * 100)\n                }\n                \n                const createdUser = await this.apiCall('post', '/users', userData)\n                \n                this.createdIds.add(`user-${createdUser.id}`)\n                this.log(`–°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: "${userData.nickname}" (${userData.firstName} ${userData.lastName})`, 'success')\n                \n                // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏\n                await this.delay(150)\n                \n            } catch (error) {\n                this.log(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${error.message}`, 'error')\n            }\n        }\n    }\n    \n    // –°–æ–∑–¥–∞–Ω–∏–µ —Å—É–¥–µ–π\n    async seedJudges() {\n        const judgeCount = Math.max(2, Math.ceil(this.profile.users * 0.2)) // 20% –æ—Ç –æ–±—â–µ–≥–æ —á–∏—Å–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n        \n        this.log(`‚öñÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ ${judgeCount} —Å—É–¥–µ–π...`)\n        \n        for (let i = 0; i < judgeCount; i++) {\n            try {\n                const judgeData = this.generateJudgeProfile()\n                const createdJudge = await this.apiCall('post', '/users', judgeData)\n                \n                this.createdIds.add(`judge-${createdJudge.id}`)\n                this.log(`–°–æ–∑–¥–∞–Ω —Å—É–¥—å—è: "${judgeData.nickname}" (${judgeData.judgeInfo.certification})`, 'success')\n                \n                await this.delay(150)\n                \n            } catch (error) {\n                this.log(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—É–¥—å–∏: ${error.message}`, 'error')\n            }\n        }\n    }\n    \n    // –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤\n    async seedAdmins() {\n        this.log('üëë –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤...')\n        \n        const adminProfiles = [\n            {\n                firstName: '–ê–¥–º–∏–Ω',\n                lastName: '–ì–ª–∞–≤–Ω—ã–π',\n                nickname: 'admin',\n                email: 'admin@jokermafia.am'\n            },\n            {\n                firstName: '–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä',\n                lastName: '–°–∏—Å—Ç–µ–º–Ω—ã–π',\n                nickname: 'moderator',\n                email: 'moderator@jokermafia.am'\n            }\n        ]\n        \n        for (const profile of adminProfiles) {\n            try {\n                const adminData = this.generateUser()\n                \n                // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –ø–æ–ª—è\n                adminData.firstName = profile.firstName\n                adminData.lastName = profile.lastName\n                adminData.nickname = profile.nickname\n                adminData.email = profile.email\n                adminData.role = 'admin'\n                adminData.isActive = true\n                adminData.rating = 2500 // –í—ã—Å–æ–∫–∏–π —Ä–µ–π—Ç–∏–Ω–≥\n                adminData.gamesPlayed = this.randomInt(200, 1000)\n                adminData.telegramUsername = '@' + profile.nickname\n                \n                const createdAdmin = await this.apiCall('post', '/users', adminData)\n                \n                this.createdIds.add(`admin-${createdAdmin.id}`)\n                this.log(`–°–æ–∑–¥–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: "${adminData.nickname}"`, 'success')\n                \n            } catch (error) {\n                this.log(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: ${error.message}`, 'error')\n            }\n        }\n    }\n    \n    // –ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ seeding\n    async seed() {\n        await this.seedAdmins()\n        await this.seedJudges()\n        await this.seedUsers()\n    }\n    \n    // –û—á–∏—Å—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n    async clean() {\n        this.log('üßπ –û—á–∏—Å—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...')\n        \n        try {\n            const users = await this.apiCall('get', '/users')\n            \n            if (users && users.length > 0) {\n                for (const user of users) {\n                    try {\n                        // –ù–µ —É–¥–∞–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n                        if (user.email && (\n                            user.email.includes('admin@') || \n                            user.email.includes('system@') ||\n                            user.nickname === 'admin'\n                        )) {\n                            this.log(`–ü—Ä–æ–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.nickname}`, 'warn')\n                            continue\n                        }\n                        \n                        await this.apiCall('delete', `/users/${user.id}`)\n                        this.log(`–£–¥–∞–ª—ë–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: "${user.nickname}" (ID: ${user.id})`, 'success')\n                        \n                    } catch (error) {\n                        this.log(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}: ${error.message}`, 'error')\n                    }\n                }\n            } else {\n                this.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã')\n            }\n            \n        } catch (error) {\n            this.log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${error.message}`, 'error')\n        }\n    }\n    \n    // –ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n    async createTestUser(role = 'player') {\n        this.log(`üéØ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (${role})...`)\n        \n        try {\n            let userData\n            \n            switch (role) {\n                case 'judge':\n                    userData = this.generateJudgeProfile()\n                    break\n                case 'admin':\n                    userData = this.generateUser()\n                    userData.role = 'admin'\n                    userData.isActive = true\n                    break\n                default:\n                    userData = this.generateUser()\n                    userData.role = 'player'\n            }\n            \n            const createdUser = await this.apiCall('post', '/users', userData)\n            \n            this.log(`–°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: "${userData.nickname}" (${role})`, 'success')\n            \n            return createdUser\n        } catch (error) {\n            this.log(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${error.message}`, 'error')\n            throw error\n        }\n    }\n}