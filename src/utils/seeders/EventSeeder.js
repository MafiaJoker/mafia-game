import { faker } from '@faker-js/faker'
import { BaseSeeder } from './BaseSeeder.js'
import { SEED_CONFIG, getProfileConfig } from '@/config/seedConfig.js'

export class EventSeeder extends BaseSeeder {
    constructor(profile = 'minimal') {
        super()
        this.profile = getProfileConfig(profile)
        this.eventTypes = []
    }
    
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ç–∏–ø–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    generateEventType() {
        const categories = SEED_CONFIG.events.categories
        const sportNames = [
            '–ú–∞—Ñ–∏—è', '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –ú–∞—Ñ–∏—è', '–¢—É—Ä–Ω–∏—Ä–Ω–∞—è –ú–∞—Ñ–∏—è',
            '–°–ø–æ—Ä—Ç–∏–≤–Ω–∞—è –ú–∞—Ñ–∏—è', '–ö–ª—É–±–Ω–∞—è –ú–∞—Ñ–∏—è'
        ]
        
        return {
            name: this.randomFromArray(sportNames),
            category: this.randomFromArray(categories),
            description: faker.lorem.paragraph(),
            rules: faker.lorem.paragraphs(2),
            maxPlayers: 10,
            minPlayers: 10,
            isActive: true
        }
    }
    
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    generateEvent(eventTypeId = null) {
        const categories = SEED_CONFIG.events.categories
        const languages = SEED_CONFIG.events.languages
        const statuses = SEED_CONFIG.events.statuses
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–æ–≤
        const eventPrefixes = [
            '–û—Ç–∫—Ä—ã—Ç—ã–π —Ç—É—Ä–Ω–∏—Ä', '–ß–µ–º–ø–∏–æ–Ω–∞—Ç', '–ö—É–±–æ–∫', '–§–µ—Å—Ç–∏–≤–∞–ª—å', 
            '–ü–µ—Ä–≤–µ–Ω—Å—Ç–≤–æ', '–ö–ª—É–±–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä', '–õ–∏–≥–∞', '–ú–∞—Å—Ç–µ—Ä—Å–∫–∞—è'
        ]
        
        const eventSuffixes = [
            '–ø–æ —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–π –º–∞—Ñ–∏–∏', '—Å—Ä–µ–¥–∏ –ª—é–±–∏—Ç–µ–ª–µ–π', '–ø–∞–º—è—Ç–∏ –≥–µ—Ä–æ–µ–≤',
            '–Ω–∞ –∫—É–±–æ–∫ –≥–æ—Ä–æ–¥–∞', '–≤–µ—Å–µ–Ω–Ω–∏–π', '–æ—Å–µ–Ω–Ω–∏–π', '–Ω–æ–≤–æ–≥–æ–¥–Ω–∏–π',
            '–¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö', '–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–æ–≤', '—Å—Ç—É–¥–µ–Ω—Ç–æ–≤'
        ]
        
        const prefix = this.randomFromArray(eventPrefixes)
        const suffix = this.randomFromArray(eventSuffixes)
        const eventName = `${prefix} ${suffix}`
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞—Ç—ã
        const startDate = this.randomDate(
            new Date(2024, 0, 1), 
            new Date(2024, 6, 31)
        )
        
        const endDate = new Date(startDate)
        endDate.setDate(startDate.getDate() + this.randomInt(1, 7))
        
        return {
            name: eventName,
            description: faker.lorem.paragraph(2),
            category: this.randomFromArray(categories),
            language: this.randomFromArray(languages),
            status: this.randomFromArray(statuses),
            startDate: startDate.toISOString().split('T')[0],
            endDate: endDate.toISOString().split('T')[0],
            location: faker.address.city(),
            venue: faker.company.name() + ' ' + faker.helpers.arrayElement(['–ö–ª—É–±', '–¶–µ–Ω—Ç—Ä', '–î–æ–º –∫—É–ª—å—Ç—É—Ä—ã', '–ö–∞—Ñ–µ']),
            maxParticipants: this.randomInt(20, 200),
            registrationDeadline: new Date(startDate.getTime() - 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
            entryFee: this.randomBoolean() ? this.randomInt(500, 5000) : 0,
            prizes: faker.lorem.sentence(),
            contactInfo: {
                email: faker.internet.email(),
                phone: faker.phone.number('+7 (9##) ###-##-##'),
                telegram: '@' + faker.internet.userName()
            },
            rules: faker.lorem.paragraphs(3),
            isPublic: this.randomBoolean(),
            eventTypeId: eventTypeId
        }
    }
    
    // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–ø–æ–≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
    async seedEventTypes() {
        this.log('üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–ø–æ–≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π...')
        
        // –°–æ–∑–¥–∞—ë–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã—Ö —Ç–∏–ø–æ–≤
        const typesToCreate = 3
        
        for (let i = 0; i < typesToCreate; i++) {
            try {
                const eventTypeData = this.generateEventType()
                const createdEventType = await this.apiCall('post', '/event-types', eventTypeData)
                
                this.eventTypes.push(createdEventType)
                this.createdIds.add(`event-type-${createdEventType.id}`)
                this.log(`–°–æ–∑–¥–∞–Ω —Ç–∏–ø –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: "${eventTypeData.name}" (ID: ${createdEventType.id})`, 'success')
                
            } catch (error) {
                this.log(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–ø–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: ${error.message}`, 'error')
            }
        }
    }
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
    async seedEvents() {
        this.log(`üìÖ –°–æ–∑–¥–∞–Ω–∏–µ ${this.profile.events} –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π...`)
        
        for (let i = 0; i < this.profile.events; i++) {
            try {
                // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ç–∏–ø –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –µ—Å–ª–∏ –µ—Å—Ç—å
                const eventTypeId = this.eventTypes.length > 0 
                    ? this.randomFromArray(this.eventTypes).id 
                    : null
                
                const eventData = this.generateEvent(eventTypeId)
                const createdEvent = await this.apiCall('post', '/events', eventData)
                
                this.createdIds.add(`event-${createdEvent.id}`)
                this.log(`–°–æ–∑–¥–∞–Ω–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: "${eventData.name}" (ID: ${createdEvent.id})`, 'success')
                
                // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                await this.delay(200)
                
            } catch (error) {
                this.log(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: ${error.message}`, 'error')
            }
        }
    }
    
    // –ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ seeding
    async seed() {
        await this.seedEventTypes()
        await this.seedEvents()
    }
    
    // –û—á–∏—Å—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    async clean() {
        this.log('üßπ –û—á–∏—Å—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π...')
        
        try {
            // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
            const events = await this.apiCall('get', '/events')
            
            if (events && events.length > 0) {
                for (const event of events) {
                    try {
                        await this.apiCall('delete', `/events/${event.id}`)
                        this.log(`–£–¥–∞–ª–µ–Ω–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: "${event.name}" (ID: ${event.id})`, 'success')
                    } catch (error) {
                        this.log(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è ${event.id}: ${error.message}`, 'error')
                    }
                }
            }
            
            // –û—á–∏—Å—Ç–∫–∞ —Ç–∏–ø–æ–≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
            const eventTypes = await this.apiCall('get', '/event-types')
            
            if (eventTypes && eventTypes.length > 0) {
                for (const eventType of eventTypes) {
                    try {
                        await this.apiCall('delete', `/event-types/${eventType.id}`)
                        this.log(`–£–¥–∞–ª—ë–Ω —Ç–∏–ø –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: "${eventType.name}" (ID: ${eventType.id})`, 'success')
                    } catch (error) {
                        this.log(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è ${eventType.id}: ${error.message}`, 'error')
                    }
                }
            }
            
        } catch (error) {
            this.log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: ${error.message}`, 'error')
        }
    }
    
    // –ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    async createTestEvent() {
        this.log('üéØ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è...')
        
        try {
            const eventData = this.generateEvent()
            const createdEvent = await this.apiCall('post', '/events', eventData)
            
            this.log(`–°–æ–∑–¥–∞–Ω–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: "${eventData.name}" (ID: ${createdEvent.id})`, 'success')
            
            return createdEvent
        } catch (error) {
            this.log(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: ${error.message}`, 'error')
            throw error
        }
    }
}