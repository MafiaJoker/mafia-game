import { faker } from '@faker-js/faker'
import { BaseSeeder } from './BaseSeeder.js'
import { SEED_CONFIG, getProfileConfig } from '@/config/seedConfig.js'

export class GameSeeder extends BaseSeeder {
    constructor(profile = 'minimal') {
        super()
        this.profile = getProfileConfig(profile)
        this.events = []
        this.players = []
    }
    
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–≥—Ä–æ–∫–∞ –¥–ª—è –∏–≥—Ä—ã
    generatePlayer(seatNumber = 1) {
        const firstNames = SEED_CONFIG.users.firstNames
        const lastNames = SEED_CONFIG.users.lastNames
        
        const firstName = this.randomFromArray(firstNames)
        const lastName = this.randomFromArray(lastNames)
        
        return {
            seatNumber: seatNumber,
            nickname: `${firstName}_${lastName}`,
            realName: `${firstName} ${lastName}`,
            telegramUsername: '@' + firstName.toLowerCase() + '_' + lastName.toLowerCase(),
            isGuest: this.randomBoolean(),
            status: 'ALIVE'
        }
    }
    
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ —Å–æ—Å—Ç–∞–≤–∞ –∏–≥—Ä—ã (10 –∏–≥—Ä–æ–∫–æ–≤)
    generateGamePlayers() {
        const players = []
        
        for (let i = 1; i <= 10; i++) {
            players.push(this.generatePlayer(i))
        }
        
        return players
    }
    
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–π –∏–≥—Ä—ã
    generateGame(eventId) {
        const statuses = SEED_CONFIG.games.statuses
        const results = SEED_CONFIG.games.results
        const rounds = SEED_CONFIG.games.rounds
        
        const gameNames = [
            '–ò–≥—Ä–∞ #1', '–ò–≥—Ä–∞ #2', '–ò–≥—Ä–∞ #3', '–§–∏–Ω–∞–ª—å–Ω–∞—è –∏–≥—Ä–∞',
            '–ü–æ–ª—É—Ñ–∏–Ω–∞–ª', '–ß–µ—Ç–≤–µ—Ä—Ç—å—Ñ–∏–Ω–∞–ª', '–û—Ç–±–æ—Ä–æ—á–Ω–∞—è –∏–≥—Ä–∞',
            '–ò–≥—Ä–∞ –Ω–∞ –≤—ã–±—ã–≤–∞–Ω–∏–µ', '–†–µ—à–∞—é—â–∞—è –∏–≥—Ä–∞', '–°—Ç–∞—Ä—Ç–æ–≤–∞—è –∏–≥—Ä–∞'
        ]
        
        const status = this.randomFromArray(statuses)
        const gameData = {
            name: this.randomFromArray(gameNames),
            eventId: eventId,
            status: status,
            startTime: this.randomDate(new Date(2024, 0, 1), new Date()).toISOString(),
            judgeNotes: faker.lorem.paragraph(),
            createdAt: new Date().toISOString(),
            updatedAt: new Date().toISOString()
        }
        
        // –ï—Å–ª–∏ –∏–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –¥–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ —Ä–∞—É–Ω–¥—ã
        if (status === 'finished') {
            gameData.result = this.randomFromArray(results)
            gameData.currentRound = this.randomFromArray(rounds)
            gameData.endTime = new Date(
                new Date(gameData.startTime).getTime() + this.randomInt(30, 180) * 60 * 1000
            ).toISOString()
        } else if (status === 'in_progress') {
            gameData.currentRound = this.randomFromArray(rounds.slice(0, -1)) // –ù–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞—É–Ω–¥
        }
        
        return gameData
    }
    
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
    generateGameState(gameId) {
        const roles = ['CIVILIAN', 'MAFIA', 'DON', 'SHERIFF']
        const players = []
        
        // –°–æ–∑–¥–∞—ë–º 10 –∏–≥—Ä–æ–∫–æ–≤ —Å —Ä–æ–ª—è–º–∏
        for (let i = 1; i <= 10; i++) {
            let role = 'CIVILIAN'
            
            // –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª–∏: 2 –º–∞—Ñ–∏–∏, 1 –¥–æ–Ω, 1 —à–µ—Ä–∏—Ñ, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–∏—Ä–Ω—ã–µ
            if (i === 1) role = 'DON'
            else if (i <= 3) role = 'MAFIA'  
            else if (i === 4) role = 'SHERIFF'
            
            const player = {
                id: i,
                seatNumber: i,
                name: `–ò–≥—Ä–æ–∫ ${i}`,
                role: role,
                originalRole: role,
                isAlive: this.randomBoolean() ? true : this.randomInt(1, 10) > 3, // 70% –∂–∏–≤—ã—Ö
                isEliminated: false,
                fouls: this.randomInt(0, 2),
                canSpeak: true,
                status: 'ALIVE'
            }
            
            if (!player.isAlive) {
                player.status = this.randomFromArray(['KILLED', 'VOTED_OUT', 'KICKED'])
            }
            
            players.push(player)
        }
        
        return {\n            gameId: gameId,\n            round: this.randomInt(1, 5),\n            phase: this.randomFromArray(['DAY', 'NIGHT']),\n            gameStatus: 'IN_PROGRESS',\n            gameSubstatus: this.randomFromArray(['DISCUSSION', 'VOTING', 'MAFIA_KILL']),\n            isGameStarted: true,\n            players: players,\n            nominatedPlayers: [],\n            votingResults: {},\n            shootoutPlayers: [],\n            deadPlayers: players.filter(p => !p.isAlive).map(p => p.id),\n            eliminatedPlayers: [],\n            nightKill: null,\n            bestMoveUsed: this.randomBoolean(),\n            noCandidatesRounds: this.randomInt(0, 2),\n            mafiaTarget: null,\n            donTarget: null,\n            sheriffTarget: null,\n            bestMoveTargets: [],\n            rolesVisible: false,\n            scores: {},\n            isCriticalRound: false,\n            showBestMove: false\n        }\n    }\n    \n    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π\n    async loadEvents() {\n        try {\n            this.events = await this.apiCall('get', '/events')\n            this.log(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${this.events.length} –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π`)\n        } catch (error) {\n            this.log(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π: ${error.message}`, 'error')\n            throw error\n        }\n    }\n    \n    // –°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π\n    async seedGames() {\n        if (this.events.length === 0) {\n            this.log('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä', 'warn')\n            return\n        }\n        \n        this.log(`üéÆ –°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä –¥–ª—è ${this.events.length} –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π...`)\n        \n        for (const event of this.events) {\n            const gamesToCreate = Math.min(this.profile.gamesPerEvent, 5) // –ú–∞–∫—Å–∏–º—É–º 5 –∏–≥—Ä –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ\n            \n            this.log(`–°–æ–∑–¥–∞–Ω–∏–µ ${gamesToCreate} –∏–≥—Ä –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è "${event.name}"`)\n            \n            for (let i = 0; i < gamesToCreate; i++) {\n                try {\n                    const gameData = this.generateGame(event.id)\n                    const createdGame = await this.apiCall('post', '/games', gameData)\n                    \n                    this.createdIds.add(`game-${createdGame.id}`)\n                    this.log(`–°–æ–∑–¥–∞–Ω–∞ –∏–≥—Ä–∞: "${gameData.name}" (ID: ${createdGame.id})`, 'success')\n                    \n                    // –°–æ–∑–¥–∞—ë–º –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –∏–≥—Ä—ã\n                    await this.seedGamePlayers(createdGame.id)\n                    \n                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã\n                    if (gameData.status !== 'not_started') {\n                        await this.seedGameState(createdGame.id)\n                    }\n                    \n                    // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∏–≥—Ä–∞–º–∏\n                    await this.delay(300)\n                    \n                } catch (error) {\n                    this.log(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä—ã –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è ${event.id}: ${error.message}`, 'error')\n                }\n            }\n        }\n    }\n    \n    // –°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –∏–≥—Ä—ã\n    async seedGamePlayers(gameId) {\n        try {\n            const players = this.generateGamePlayers()\n            \n            await this.apiCall('post', `/games/${gameId}/players`, {\n                players: players\n            })\n            \n            this.log(`–î–æ–±–∞–≤–ª–µ–Ω—ã –∏–≥—Ä–æ–∫–∏ –¥–ª—è –∏–≥—Ä—ã ${gameId}`, 'success')\n            \n        } catch (error) {\n            this.log(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –∏–≥—Ä—ã ${gameId}: ${error.message}`, 'error')\n        }\n    }\n    \n    // –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã\n    async seedGameState(gameId) {\n        try {\n            const gameState = this.generateGameState(gameId)\n            \n            // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ—Ä–µ–∑ API —Å–æ—Å—Ç–æ—è–Ω–∏–π\n            // –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: —ç—Ç–æ—Ç endpoint –º–æ–∂–µ—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ç–µ–∫—É—â–µ–º API\n            await this.apiCall('put', `/games/${gameId}/state`, gameState)\n            \n            this.log(`–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∏–≥—Ä—ã ${gameId}`, 'success')\n            \n        } catch (error) {\n            // –ï—Å–ª–∏ endpoint –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–∞—è –æ—à–∏–±–∫–∞\n            this.log(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã ${gameId}: ${error.message}`, 'warn')\n        }\n    }\n    \n    // –ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ seeding\n    async seed() {\n        await this.loadEvents()\n        await this.seedGames()\n    }\n    \n    // –û—á–∏—Å—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä\n    async clean() {\n        this.log('üßπ –û—á–∏—Å—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä...')\n        \n        try {\n            const games = await this.apiCall('get', '/games')\n            \n            if (games && games.length > 0) {\n                for (const game of games) {\n                    try {\n                        await this.apiCall('delete', `/games/${game.id}`)\n                        this.log(`–£–¥–∞–ª–µ–Ω–∞ –∏–≥—Ä–∞: "${game.name}" (ID: ${game.id})`, 'success')\n                    } catch (error) {\n                        this.log(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–≥—Ä—ã ${game.id}: ${error.message}`, 'error')\n                    }\n                }\n            } else {\n                this.log('–ò–≥—Ä—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã')\n            }\n            \n        } catch (error) {\n            this.log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∏–≥—Ä: ${error.message}`, 'error')\n        }\n    }\n    \n    // –ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–¥–Ω–æ–π —Ç–µ—Å—Ç–æ–≤–æ–π –∏–≥—Ä—ã\n    async createTestGame(eventId = null) {\n        this.log('üéØ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∏–≥—Ä—ã...')\n        \n        try {\n            // –ï—Å–ª–∏ eventId –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤–æ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ\n            if (!eventId) {\n                await this.loadEvents()\n                if (this.events.length === 0) {\n                    throw new Error('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä—ã')\n                }\n                eventId = this.events[0].id\n            }\n            \n            const gameData = this.generateGame(eventId)\n            const createdGame = await this.apiCall('post', '/games', gameData)\n            \n            this.log(`–°–æ–∑–¥–∞–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è –∏–≥—Ä–∞: "${gameData.name}" (ID: ${createdGame.id})`, 'success')\n            \n            // –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–æ–≤\n            await this.seedGamePlayers(createdGame.id)\n            \n            return createdGame\n        } catch (error) {\n            this.log(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π –∏–≥—Ä—ã: ${error.message}`, 'error')\n            throw error\n        }\n    }\n}