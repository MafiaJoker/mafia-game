import axios from 'axios'
import { faker } from '@faker-js/faker'
import { SEED_CONFIG } from '@/config/seedConfig.js'

export class BaseSeeder {
    constructor() {
        this.api = axios.create({
            baseURL: 'https://dev.api.jokermafia.am/api/v1',
            headers: {
                'Content-Type': 'application/json'
            },
            timeout: SEED_CONFIG.api.timeout
        })
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º faker –¥–ª—è —Ä—É—Å—Å–∫–æ–π –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
        faker.setLocale('ru')
        
        this.createdIds = new Set()
        this.errors = []
        this.success = []
    }
    
    // –ë–∞–∑–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    log(message, type = 'info') {
        const timestamp = new Date().toLocaleTimeString()
        const prefix = `[${timestamp}] ${this.constructor.name}:`
        
        switch (type) {
            case 'error':
                console.error(`${prefix} ‚ùå ${message}`)
                this.errors.push(message)
                break
            case 'success':
                console.log(`${prefix} ‚úÖ ${message}`)
                this.success.push(message)
                break
            case 'warn':
                console.warn(`${prefix} ‚ö†Ô∏è ${message}`)
                break
            default:
                console.log(`${prefix} ‚ÑπÔ∏è ${message}`)
        }
    }
    
    // –ú–µ—Ç–æ–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è API –∑–∞–ø—Ä–æ—Å–æ–≤ —Å —Ä–µ—Ç—Ä–∞—è–º–∏
    async apiCall(method, url, data = null, retries = SEED_CONFIG.api.retries) {
        for (let attempt = 1; attempt <= retries; attempt++) {
            try {
                let response
                switch (method.toLowerCase()) {
                    case 'get':
                        response = await this.api.get(url)
                        break
                    case 'post':
                        response = await this.api.post(url, data)
                        break
                    case 'put':
                        response = await this.api.put(url, data)
                        break
                    case 'patch':
                        response = await this.api.patch(url, data)
                        break
                    case 'delete':
                        response = await this.api.delete(url)
                        break
                    default:
                        throw new Error(`–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π HTTP –º–µ—Ç–æ–¥: ${method}`)
                }
                
                return response.data
            } catch (error) {
                this.log(`–ü–æ–ø—ã—Ç–∫–∞ ${attempt}/${retries} –Ω–µ—É–¥–∞—á–Ω–∞: ${error.message}`, 'warn')
                
                if (attempt === retries) {
                    throw error
                }
                
                // –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                await this.delay(1000 * attempt)
            }
        }
    }
    
    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    delay(ms) {
        return new Promise(resolve => setTimeout(resolve, ms))
    }
    
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–π –¥–∞—Ç—ã
    randomDate(start = new Date(2024, 0, 1), end = new Date(2024, 11, 31)) {
        return faker.date.between(start, end)
    }
    
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–∑ –º–∞—Å—Å–∏–≤–∞
    randomFromArray(array) {
        return array[Math.floor(Math.random() * array.length)]
    }
    
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —á–∏—Å–ª–∞
    randomInt(min, max) {
        return Math.floor(Math.random() * (max - min + 1)) + min
    }
    
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –±—É–ª–µ–≤–∞
    randomBoolean() {
        return Math.random() < 0.5
    }
    
    // –û—Ç—á—ë—Ç –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏
    printReport() {
        this.log(`\\nüìä –û—Ç—á—ë—Ç –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏:`)
        this.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ: ${this.success.length}`)
        this.log(`‚ùå –û—à–∏–±–æ–∫: ${this.errors.length}`)
        
        if (this.errors.length > 0) {
            this.log(`\\n–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–æ–∫:`)
            this.errors.forEach(error => this.log(`  ‚Ä¢ ${error}`, 'error'))
        }
        
        if (this.createdIds.size > 0) {
            this.log(`\\nüÜî –°–æ–∑–¥–∞–Ω–Ω—ã–µ ID: ${Array.from(this.createdIds).join(', ')}`)
        }
    }
    
    // –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –≤ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∞—Ö
    async seed() {
        throw new Error('–ú–µ—Ç–æ–¥ seed() –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–µ')
    }
    
    async clean() {
        throw new Error('–ú–µ—Ç–æ–¥ clean() –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–µ')
    }
    
    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è API
    async checkApiHealth() {
        try {
            await this.apiCall('get', '/healthz')
            this.log('API –¥–æ—Å—Ç—É–ø–Ω–æ', 'success')
            return true
        } catch (error) {
            this.log(`API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ: ${error.message}`, 'error')
            return false
        }
    }
    
    // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π API
    async safeRun(operation) {
        this.log(`üöÄ –ó–∞–ø—É—Å–∫ ${operation}...`)
        
        const isHealthy = await this.checkApiHealth()
        if (!isHealthy) {
            this.log('–ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–∑-–∑–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API', 'error')
            return false
        }
        
        try {
            const startTime = Date.now()
            await this[operation]()
            const duration = Date.now() - startTime
            
            this.log(`üèÅ ${operation} –∑–∞–≤–µ—Ä—à—ë–Ω –∑–∞ ${duration}ms`, 'success')
            this.printReport()
            
            return true
        } catch (error) {
            this.log(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ ${operation}: ${error.message}`, 'error')
            this.printReport()
            return false
        }
    }
}